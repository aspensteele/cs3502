#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h> // For strerror()
#include <errno.h> // For error codes


// Add mutex to account structure
typedef struct {
    int account_id;
    double balance;
    int transaction_count;
    pthread_mutex_t lock; // Mutex for this account
} Account;

// Initialize mutexes- MUST be done before creating threads!
for (int i = 0; i < NUM_ACCOUNTS; i++) {
    pthread_mutex_init(&accounts[i].lock, NULL);
    accounts[i].balance = INITIAL_BALANCE;
    accounts[i].transaction_count = 0;
}

// Protected transaction
void deposit(int account_id, double amount) {
    pthread_mutex_lock(&accounts[account_id].lock);
    // Critical section- only one thread can execute this at a time
    accounts[account_id].balance += amount;
    accounts[account_id].transaction_count++;
    pthread_mutex_unlock(&accounts[account_id].lock);
}

// Error checking (optional but recommended)
if (pthread_mutex_lock(&accounts[id].lock) != 0) {
    perror("Failed to acquire lock");
    return;
}
