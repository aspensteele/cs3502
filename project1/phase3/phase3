#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h> // For strerror()
#include <errno.h> // For error codes

void transfer(int from_id, int to_id, double amount) {
    printf("Thread %ld: Attempting transfer from %d to %d\n",
           pthread_self(), from_id, to_id);

    pthread_mutex_lock(&accounts[from_id].lock);
    printf("Thread %ld: Locked account %d\n", pthread_self(), from_id);

    // Simulate processing delay-gives other thread time to create deadlock
    usleep(100); // Sleep for 100 microseconds

    printf("Thread %ld: Waiting for account %d\n", pthread_self(), to_id);
    pthread_mutex_lock(&accounts[to_id].lock);

    // If we get here, no deadlock occurred this time
    accounts[from_id].balance -= amount;
    accounts[to_id].balance += amount;

    pthread_mutex_unlock(&accounts[to_id].lock);
    pthread_mutex_unlock(&accounts[from_id].lock);
}

// Create threads that will deadlock:
// Thread 1: transfer(A, B) // Locks A, waits for B
// Thread 2: transfer(B, A) // Locks B, waits for A
